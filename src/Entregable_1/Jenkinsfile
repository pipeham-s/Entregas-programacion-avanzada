pipeline {
    agent {
        docker {
            image 'python:3.11-slim'
            args '-u root'  // Ejecuta como root para evitar problemas de permisos
        }
    }
    triggers {
        pollSCM('H/5 * * * *')  // Verifica cambios cada 5 minutos
    }
    environment {
        PROJECT_DIR = 'src/Entregable_1'
        PYTHON_VERSION = 'python3'
    }
    stages {
        stage('Setup Python') {
            steps {
                echo "Instalando dependencias de Python..."
                sh """
                ${PYTHON_VERSION} -m pip install --upgrade pip
                ${PYTHON_VERSION} -m pip install virtualenv
                cd ${PROJECT_DIR}
                virtualenv venv
                . venv/bin/activate
                pip install -r requirements.txt
                """
            }
        }
        stage('Test') {
            steps {
                echo "Ejecutando tests..."
                sh """
                cd ${PROJECT_DIR}
                . venv/bin/activate
                ${PYTHON_VERSION} -m pytest --cov=trivia --cov-report=term --cov-report=html
                """
            }
        }
        stage('Report') {
            steps {
                echo "Generando reporte de cobertura..."
                publishHTML(target: [
                    reportDir: "${PROJECT_DIR}/htmlcov",
                    reportFiles: 'index.html',
                    reportName: 'Cobertura de Tests'
                ])
            }
        }
        stage('Deliver') {
            steps {
                echo "Simulando entrega..."
                sh "echo 'Entrega completada exitosamente.'"
            }
        }
    }
    post {
        always {
            echo "Pipeline finalizado."
            cleanWs()  // Limpia el workspace después de la ejecución
        }
        failure {
            echo "Pipeline falló. Verifica los errores."
        }
        success {
            echo "Pipeline ejecutado exitosamente."
        }
    }
}
