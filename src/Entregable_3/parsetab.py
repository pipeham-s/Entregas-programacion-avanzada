
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTUALIZA ADD_COLUMN AGREGA_LA_COLUMNA AGRUPANDO_POR ALTER_TABLE ASTERISK BETWEEN BORRA_DE_LA CAMBIA_LA_TABLA CAST CLAVE_PRIMA CLAVE_REFERENTE COMMA COMO_MUCHO CONTANDO COUNT CREATE_TABLE CREA_LA_TABLA DEFAULT DELETE_FROM DE_LA_TABLA DISTINCT DONDE DROP_COLUMN DROP_TABLE ELIMINA_LA_COLUMNA EN ENTRE EQUALS ES_NULO EXISTS FOREIGN_KEY FROM GREATER_THAN GROUP_BY HAVING ID INSERT_INTO IN_ESTO IS_NULL JOIN LESS_THAN LIKE LIMIT LOS_DISTINTOS LOS_VALORES LPAREN METE_EN MEZCLANDO NOT_NULL NO_NULO NUMBER ON ORDENA_POR ORDER_BY PARECIDO_A POR_DEFECTO PRIMARY_KEY RPAREN SELECT SET SETEA STRING TIRA_LA_TABLA TRAEME TRANSFORMA_A UNICO UNIQUE UPDATE VALUES WHERE WHERE_DEL_GROUP_BYstatement : statement_select\n                 | statement_insert\n                 | statement_update\n                 | statement_deletestatement_select : SELECT columns FROM table WHERE condition\n                        | TRAEME columns DE_LA_TABLA table DONDE conditionstatement_insert : INSERT_INTO table LPAREN column_list RPAREN VALUES LPAREN value_list RPAREN\n                        | METE_EN table LPAREN column_list RPAREN LOS_VALORES LPAREN value_list RPARENstatement_update : UPDATE table SET assignments WHERE condition\n                        | ACTUALIZA table SETEA assignments DONDE conditionstatement_delete : DELETE_FROM table WHERE condition\n                        | BORRA_DE_LA table DONDE conditionassignments : column EQUALS value\n                   | assignments COMMA column EQUALS valuecolumn : IDcolumns : ID\n               | ASTERISK\n               | columns COMMA IDtable : IDcondition : ID EQUALS value\n                 | ID GREATER_THAN value\n                 | ID LESS_THAN valuecolumn_list : ID\n                   | column_list COMMA IDvalue_list : value\n                  | value_list COMMA valuevalue : NUMBER\n             | STRING'
    
_lr_action_items = {'SELECT':([0,],[6,]),'TRAEME':([0,],[7,]),'INSERT_INTO':([0,],[8,]),'METE_EN':([0,],[9,]),'UPDATE':([0,],[10,]),'ACTUALIZA':([0,],[11,]),'DELETE_FROM':([0,],[12,]),'BORRA_DE_LA':([0,],[13,]),'$end':([1,2,3,4,5,44,46,59,60,64,67,68,69,70,71,72,80,82,],[0,-1,-2,-3,-4,-11,-12,-5,-6,-9,-27,-28,-10,-20,-21,-22,-7,-8,]),'ID':([6,7,8,9,10,11,12,13,25,26,27,28,29,30,31,32,33,47,48,50,52,53,55,],[15,15,19,19,19,19,19,19,19,35,19,38,38,42,42,45,45,45,45,62,45,42,45,]),'ASTERISK':([6,7,],[16,16,]),'FROM':([14,15,16,35,],[25,-16,-17,-18,]),'COMMA':([14,15,16,17,35,37,38,39,40,43,62,66,67,68,76,77,78,79,83,],[26,-16,-17,26,-18,50,-23,50,53,53,-24,-13,-27,-28,81,-25,81,-14,-26,]),'DE_LA_TABLA':([15,16,17,35,],[-16,-17,27,-18,]),'LPAREN':([18,19,20,61,63,],[28,-19,29,73,74,]),'SET':([19,21,],[-19,30,]),'SETEA':([19,22,],[-19,31,]),'WHERE':([19,23,34,40,66,67,68,79,],[-19,32,47,52,-13,-27,-28,-14,]),'DONDE':([19,24,36,43,66,67,68,79,],[-19,33,48,55,-13,-27,-28,-14,]),'RPAREN':([37,38,39,62,67,68,76,77,78,83,],[49,-23,51,-24,-27,-28,80,-25,82,-26,]),'EQUALS':([41,42,45,65,],[54,-15,56,75,]),'GREATER_THAN':([45,],[57,]),'LESS_THAN':([45,],[58,]),'VALUES':([49,],[61,]),'LOS_VALORES':([51,],[63,]),'NUMBER':([54,56,57,58,73,74,75,81,],[67,67,67,67,67,67,67,67,]),'STRING':([54,56,57,58,73,74,75,81,],[68,68,68,68,68,68,68,68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'statement_select':([0,],[2,]),'statement_insert':([0,],[3,]),'statement_update':([0,],[4,]),'statement_delete':([0,],[5,]),'columns':([6,7,],[14,17,]),'table':([8,9,10,11,12,13,25,27,],[18,20,21,22,23,24,34,36,]),'column_list':([28,29,],[37,39,]),'assignments':([30,31,],[40,43,]),'column':([30,31,53,],[41,41,65,]),'condition':([32,33,47,48,52,55,],[44,46,59,60,64,69,]),'value':([54,56,57,58,73,74,75,81,],[66,70,71,72,77,77,79,83,]),'value_list':([73,74,],[76,78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> statement_select','statement',1,'p_statement','parser.py',10),
  ('statement -> statement_insert','statement',1,'p_statement','parser.py',11),
  ('statement -> statement_update','statement',1,'p_statement','parser.py',12),
  ('statement -> statement_delete','statement',1,'p_statement','parser.py',13),
  ('statement_select -> SELECT columns FROM table WHERE condition','statement_select',6,'p_statement_select','parser.py',18),
  ('statement_select -> TRAEME columns DE_LA_TABLA table DONDE condition','statement_select',6,'p_statement_select','parser.py',19),
  ('statement_insert -> INSERT_INTO table LPAREN column_list RPAREN VALUES LPAREN value_list RPAREN','statement_insert',9,'p_statement_insert','parser.py',27),
  ('statement_insert -> METE_EN table LPAREN column_list RPAREN LOS_VALORES LPAREN value_list RPAREN','statement_insert',9,'p_statement_insert','parser.py',28),
  ('statement_update -> UPDATE table SET assignments WHERE condition','statement_update',6,'p_statement_update','parser.py',36),
  ('statement_update -> ACTUALIZA table SETEA assignments DONDE condition','statement_update',6,'p_statement_update','parser.py',37),
  ('statement_delete -> DELETE_FROM table WHERE condition','statement_delete',4,'p_statement_delete','parser.py',45),
  ('statement_delete -> BORRA_DE_LA table DONDE condition','statement_delete',4,'p_statement_delete','parser.py',46),
  ('assignments -> column EQUALS value','assignments',3,'p_assignments','parser.py',56),
  ('assignments -> assignments COMMA column EQUALS value','assignments',5,'p_assignments','parser.py',57),
  ('column -> ID','column',1,'p_column','parser.py',67),
  ('columns -> ID','columns',1,'p_columns','parser.py',74),
  ('columns -> ASTERISK','columns',1,'p_columns','parser.py',75),
  ('columns -> columns COMMA ID','columns',3,'p_columns','parser.py',76),
  ('table -> ID','table',1,'p_table','parser.py',84),
  ('condition -> ID EQUALS value','condition',3,'p_condition','parser.py',89),
  ('condition -> ID GREATER_THAN value','condition',3,'p_condition','parser.py',90),
  ('condition -> ID LESS_THAN value','condition',3,'p_condition','parser.py',91),
  ('column_list -> ID','column_list',1,'p_column_list','parser.py',96),
  ('column_list -> column_list COMMA ID','column_list',3,'p_column_list','parser.py',97),
  ('value_list -> value','value_list',1,'p_value_list','parser.py',105),
  ('value_list -> value_list COMMA value','value_list',3,'p_value_list','parser.py',106),
  ('value -> NUMBER','value',1,'p_value','parser.py',114),
  ('value -> STRING','value',1,'p_value','parser.py',115),
]
